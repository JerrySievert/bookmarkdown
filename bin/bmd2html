#!/usr/bin/env node

var argv = require('optimist')
    .default('theme', 'default')
    .default('out', './out')
    .demand('book')
    .usage('Convert BookMarkDown to HTML\nUsage bmd2html')
    .describe('theme', 'theme to use')
    .describe('out', 'output directory')
    .describe('config', 'optional configuration file')
    .describe('book', 'bookmarkdown file')
    .argv;

var marked = require('marked'),
    book   = require('../lib/book'),
    html   = require('../lib/conversion/html');

var fs   = require('fs'),
    util = require('util'),
    ncp  = require('ncp');

var config = require('./config.json');


// read a configuration file if one is passed in
if (argv.config) {
  try {
    var newConfig = fs.readFileSync(process.cwd() + "/" + argv.config, 'utf8');
    newConfig = JSON.parse(newConfig);

    config = util._extend(config, newConfig);
  } catch (err) {
    console.log("Error: unable to open configuration file " + argv.config);
    process.exit(1);
  }
}

// create the output directory
try {
  fs.mkdirSync(argv.out);
} catch (err) {
  console.log("Error: unable to create output directory " + argv.out);
  process.exit(1);
}

// copy the theme directory over to the output directory
var themeDir;

if (typeof(config.theme) === 'object') {
  themeDir = process.cwd() + "/" + config.theme.directory;
} else if (config.themes[argv.theme]) {
  themeDir = __dirname + "/../" + config.themes[argv.theme];
} else {
  console.log("Error: unable to find theme " + argv.theme);
  process.exit(1);
}

ncp.ncp(themeDir, argv.out + "/", function (err) {
  if (err) {
    console.log("Error: unable to copy theme");
    process.exit(1);
  }
  processBook(argv.book, argv.out + "/");
});



function processBook(bookFile, outDirectory) {
  var results = book.readBook(bookFile, config);
  var toc = html.buildTOC(results, config);
  var chapters = [ ];
  var preface;

  if (results.preface) {
    preface = { text: html.buildChapter(results.preface, config) };
  }

  for (var i = 0; i < results.chapters.length; i++) {
    chapters.push({ text: html.buildChapter(results.chapters[i], config) });
  }

  var outIndex = html.buildIndex({
    title: results.title,
    subtitle: results.subtitle,
    author: results.author.firstname + " " + results.author.lastname,
    preface: preface,
    chapters: chapters,
    table: toc
  });

  fs.writeFileSync(outDirectory + "/index.html", outIndex, 'utf8');
}
